import { KEYS } from '../constants/keys';
export const TREE_ACTIONS = {
    TOGGLE_ACTIVE: (tree, node, $event) => node && node.toggleActivated(),
    TOGGLE_ACTIVE_MULTI: (tree, node, $event) => node && node.toggleActivated(true),
    TOGGLE_SELECTED: (tree, node, $event) => node && node.toggleSelected(),
    ACTIVATE: (tree, node, $event) => node.setIsActive(true),
    DEACTIVATE: (tree, node, $event) => node.setIsActive(false),
    SELECT: (tree, node, $event) => node.setIsSelected(true),
    DESELECT: (tree, node, $event) => node.setIsSelected(false),
    FOCUS: (tree, node, $event) => node.focus(),
    TOGGLE_EXPANDED: (tree, node, $event) => node.hasChildren && node.toggleExpanded(),
    EXPAND: (tree, node, $event) => node.expand(),
    COLLAPSE: (tree, node, $event) => node.collapse(),
    DRILL_DOWN: (tree, node, $event) => tree.focusDrillDown(),
    DRILL_UP: (tree, node, $event) => tree.focusDrillUp(),
    NEXT_NODE: (tree, node, $event) => tree.focusNextNode(),
    PREVIOUS_NODE: (tree, node, $event) => tree.focusPreviousNode(),
    MOVE_NODE: (tree, node, $event, { from, to }) => {
        // default action assumes from = node, to = {parent, index}
        if ($event.ctrlKey) {
            tree.copyNode(from, to);
        }
        else {
            tree.moveNode(from, to);
        }
    }
};
const defaultActionMapping = {
    mouse: {
        click: TREE_ACTIONS.TOGGLE_ACTIVE,
        dblClick: null,
        contextMenu: null,
        expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,
        checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,
        drop: TREE_ACTIONS.MOVE_NODE
    },
    keys: {
        [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,
        [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,
        [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,
        [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,
        [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,
        [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE
    }
};
export class TreeOptions {
    constructor(options = {}) {
        this.options = options;
        this.actionMapping = {
            mouse: {
                click: this.options?.actionMapping?.mouse?.click ?? defaultActionMapping.mouse.click,
                dblClick: this.options?.actionMapping?.mouse?.dblClick ?? defaultActionMapping.mouse.dblClick,
                contextMenu: this.options?.actionMapping?.mouse?.contextMenu ?? defaultActionMapping.mouse.contextMenu,
                expanderClick: this.options?.actionMapping?.mouse?.expanderClick ?? defaultActionMapping.mouse.expanderClick,
                checkboxClick: this.options?.actionMapping?.mouse?.checkboxClick ?? defaultActionMapping.mouse.checkboxClick,
                drop: this.options?.actionMapping?.mouse?.drop ?? defaultActionMapping.mouse.drop,
                dragStart: this.options?.actionMapping?.mouse?.dragStart ?? undefined,
                drag: this.options?.actionMapping?.mouse?.drag ?? undefined,
                dragEnd: this.options?.actionMapping?.mouse?.dragEnd ?? undefined,
                dragOver: this.options?.actionMapping?.mouse?.dragOver ?? undefined,
                dragLeave: this.options?.actionMapping?.mouse?.dragLeave ?? undefined,
                dragEnter: this.options?.actionMapping?.mouse?.dragEnter ?? undefined,
                mouseOver: this.options?.actionMapping?.mouse?.mouseOver ?? undefined,
                mouseOut: this.options?.actionMapping?.mouse?.mouseOut ?? undefined,
            },
            keys: {
                [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,
                [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,
                [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,
                [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,
                [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,
                [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE
            }
        };
        if (this.options?.actionMapping?.keys) {
            this.actionMapping.keys = {
                ...this.actionMapping.keys,
                ...this.options.actionMapping.keys
            };
        }
        if (options.rtl) {
            this.actionMapping.keys[KEYS.RIGHT] = options.actionMapping?.keys[KEYS.RIGHT] || TREE_ACTIONS.DRILL_UP;
            this.actionMapping.keys[KEYS.LEFT] = options.actionMapping?.keys[KEYS.LEFT] || TREE_ACTIONS.DRILL_DOWN;
        }
    }
    get hasChildrenField() { return this.options.hasChildrenField || 'hasChildren'; }
    get childrenField() { return this.options.childrenField || 'children'; }
    get displayField() { return this.options.displayField || 'name'; }
    get idField() { return this.options.idField || 'id'; }
    get isExpandedField() { return this.options.isExpandedField || 'isExpanded'; }
    get getChildren() { return this.options.getChildren; }
    get levelPadding() { return this.options.levelPadding || 0; }
    get useVirtualScroll() { return this.options.useVirtualScroll; }
    get animateExpand() { return this.options.animateExpand; }
    get animateSpeed() { return this.options.animateSpeed || 1; }
    get animateAcceleration() { return this.options.animateAcceleration || 1.2; }
    get scrollOnActivate() { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }
    get rtl() { return !!this.options.rtl; }
    get rootId() { return this.options.rootId; }
    get useCheckbox() { return this.options.useCheckbox; }
    get useTriState() { return this.options.useTriState === undefined ? true : this.options.useTriState; }
    get scrollContainer() { return this.options.scrollContainer; }
    get allowDragoverStyling() { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }
    getNodeClone(node) {
        if (this.options.getNodeClone) {
            return this.options.getNodeClone(node);
        }
        // remove id from clone
        // keeping ie11 compatibility
        const nodeClone = Object.assign({}, node.data);
        if (nodeClone.id) {
            delete nodeClone.id;
        }
        return nodeClone;
    }
    allowDrop(element, to, $event) {
        if (this.options.allowDrop instanceof Function) {
            return this.options.allowDrop(element, to, $event);
        }
        else {
            return this.options.allowDrop === undefined ? true : this.options.allowDrop;
        }
    }
    allowDrag(node) {
        if (this.options.allowDrag instanceof Function) {
            return this.options.allowDrag(node);
        }
        else {
            return this.options.allowDrag;
        }
    }
    nodeClass(node) {
        return this.options.nodeClass ? this.options.nodeClass(node) : '';
    }
    nodeHeight(node) {
        if (node.data.virtual) {
            return 0;
        }
        let nodeHeight = this.options.nodeHeight || 22;
        if (typeof nodeHeight === 'function') {
            nodeHeight = nodeHeight(node);
        }
        // account for drop slots:
        return nodeHeight + (node.index === 0 ? 2 : 1) * this.dropSlotHeight;
    }
    get dropSlotHeight() {
        return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;
    }
}
//# sourceMappingURL=data:application/json;base64,